#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs')
var path = require('path')
var targetFilePath = './projectConfig.js'
var txt = ''

fs.readFileSync(targetFilePath).toString('UTF8').split('\r\n').forEach(function (v, k) {
  if (v.indexOf('filesPath') != -1) {
    txt += v.split('\\').join('/') + '\n'
  } else {
    txt += v + '\n'
  }
})

if (fs.existsSync(path.resolve(targetFilePath))) {
  fs.unlinkSync(path.resolve(targetFilePath))
}

fs.appendFileSync(targetFilePath, txt.trim() + '\n')

var app = require('../app')
var debug = require('debug')('demo-e:server')
var http = require('http')
const opn = require('opn')
const projectConfig = require('../projectConfig')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || projectConfig.port)
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)

  function getIPAdress() {
    var interfaces = require('os').networkInterfaces()
    for (var devName in interfaces) {
      var iface = interfaces[devName]
      for (var i = 0; i < iface.length; i++) {
        var alias = iface[i]
        if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
          return alias.address
        }
      }
    }
  }

  let _host = projectConfig.host === 'autoIp' ? getIPAdress() : 'localhost'
  if (projectConfig.autoOpenBrowser) {
    opn(`http://${_host}:${projectConfig.port}/`)
  }
}
